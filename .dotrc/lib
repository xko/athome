exec 11>&1            # UI output  
exec 12>&1            # terminal escapes
exec 13>&11           # newline separators (normal mode)
exec 14>/dev/null     # space separators   (singleline mode) 


.printf     () { [[ "$#" != 0 ]] && printf "$@"  >&11  ;}
.printfS    () { [[ "$#" != 0 ]] && printf "$@"  >&13 ;}
.printfL    () { [[ "$#" != 0 ]] && printf "$@"  >&14 ;}

.printsep   () { .printfS "\n"  ; .printfL " " ;}
.printfs    () { .printf "$@"  ; .printsep        ;}

.oneline    () {
    .printfS "$@"     
    exec 13>/dev/null ; exec 14>&11
}

.morelines  () {
    .printfL "$@" ; .printfL "\n"
    exec 14>/dev/null ; exec 13>&11
}

.q          () {     "$@" 11>/dev/null 12>/dev/null 13>/dev/null 14>/dev/null ;} 
.qq         () { .q  "$@" 1>/dev/null  2>&1                                   ;} 

.esc        () {
    printf  "\e[%sm" "$1" >&12
    .printf "${@:2}"  
    printf  "\e[0m"       >&12 
}

.paint      () { .esc "1;$1" "${@:2}" ;}
.green      () { .paint 32 "$@"       ;}
.red        () { .paint 31 "$@"       ;}
.blue       () { .paint 34 "$@"       ;}
.bold       () { .paint 1  "$@"       ;}

.perr       () {
    local r=$? ; [[ "$#" != 0 ]] && r="$1"
    if [[ "$r" == 0 ]]; then .green "$1"
                        else .red   "$1"   
    fi 
}

.ask?    () {
    [ -t 0 ]             || return 0
    .blue "${1:-"Ok? "}"  
    read -n1 -r           ; .printsep
    [[ $REPLY =~ ^[Yy]$ ]] 
} 

.eval   () {
    .bold '$ '      ; .printfs "$*";  
    .ask?           || return 1
    local code="$*" ; shift $#
    eval "$code"    
    # ; local r=$?
    # -sayL "â†‘ "      ; -errL $r  ; -sep
}

.have? () {
    type $1 &>/dev/null && return 0
    [[ "$1" == */ ]]  && [[ -d "$1" ]] && return 0
    [[ "$1" == /* ]]  && [[ -r "$1" ]] && return 0
    [[ "$1" == ./* ]] && [[ -r "$1" ]] && return 0
    .printfs "Missing %s" "$1"  
    return 1
}

.perl   () { perl -MTime::HiRes=time -e"$*" ;}
.now    () { .perl 'printf "%.9f", time'  ;}
.swatch () { echo -n .perl 'printf \"%.3f\", time - '$(.now) ;}


.tros  () { rev | sort -u | rev; }
.files () {
    find -L "$1" \( -type f -not -name "*-" -print \) -or \( -type d -name "*-" -prune \)  | .tros
}